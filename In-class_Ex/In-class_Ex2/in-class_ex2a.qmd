---
title: "In-class Exercise 2: Spatial Weights "
subtitle: "Using sfdep package" 
author: "Goh Si Hui"
date: 2023/11/25
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  warning: false
editor: visual 
---

## Task

For this task, we will be learning how to derive spatial weights using the **sfdep** package.

According to Josiah Parry, the developer of the package,

> "sfdep builds on the great shoulders of spdep package for spatial dependence. sfdep creates an sf and tidyverse friendly interface to the package as well as introduces new functionality that is not present in spdep. sfdep utilizes list columns extensively to make this interface possible."

## Getting Started

We will first load the necessary packages using the following code chunk:

-   **tmap**: for thematic mapping
-   **sf**: for geospatial data handling (e.g. importing and exporting for spatial data and geoprocessing)
-   **tidyverse**: a family of R packages for non-spatial data handling
-   **knitr**: to generate static html tables
-   **sfdep**: to calculate spatial weights and matrices, space time cube and hot spot analysis

```{r}
pacman::p_load(tmap, sf, tidyverse, sfdep, knitr)
```

## Preparing the Geospatial Data

### Importing the data

```{r}
hunan <- st_read(dsn = "data/geospatial", layer="Hunan")
```

From the above outcome, we know that `hunan`data is simple feature (sf) data frame with 88 features (each representing 1 geographical entity), and each feature is a polygon.It uses the WGS84 projection.

## Preparing the Aspatial Data

### Importing the data

```{r}
hunan2012 <- read.csv("data/aspatial/Hunan_2012.csv")
```

## Combining Both Data Frames Using Left Join

```{r}
hunan_GDPPC<- left_join(hunan, hunan2012) %>% 
                select(1:4, 7, 15)
```

When joining these 2 data frames, we did not specify the `by=` because there is a common column in both data frames (i.e., Country )

Other than joining both data frames, we also use `select()` to pick the relevant columns that we want. Note that the geometry column was retained even though it was not specified.

::: callout-Note
We typically use a left join with a spatial layer (e.g. hunan) and nonspatial layer (hunan_GDPPC) so that we can retain spatial geometric properties.
:::

## Visualising the Map

We use the following code to visualise the choropleth map of Hunan's 2012 GDPPC.

```{r}
tmap_mode("plot")
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") + 
  tm_borders(alpha = 0.5) + 
  tm_layout(main.title = "Distribution of GDP per capita by district in Hunan (2012)", main.title.position="center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35, 
            frame= TRUE) +
  tm_compass(type = "8star", size=2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)

```

## Defining Weight Matrix

As learnt in our hands-on exercises, we can define weight matrices based on contiguity (adjacency) or distance.

### Contiguity Weight Matrix 

To compute contiguity weight matrix using **sfdep** package, we perform the following steps:

1.  identify contiguity neighbour list using `st_contiguity()` of **sfdep** package, and
2.  derive the contiguity spatial weights using `st_weights()` of **sfdep** package.

To identify the contiguity neighbour list using Queen and Rook method, we use the following code chunks.

:::{.panel-tabset}
## Queen 

```{r}
nb_queen <- hunan_GDPPC %>% 
  mutate(nb=st_contiguity(geometry),
         .before=1)
```

## Rook
```{r}
nb_rook <- hunan_GDPPC %>% 
  mutate(nb=st_contiguity(geometry, queen=FALSE),
         .before=1)
``` 
:::


Let us take a look at the summary of the first lag neighbour list (i.e. nb) using the following code chunks.

:::{.panel-tabset}

## Queen 

```{r}
summary(nb_queen$nb)
```
## Rook

```{r}
summary(nb_rook$nb)
``` 
:::

The summary report for Queen Contiguity based weight matrix  shows that there are 88 area units in Hunan province. The most connected area unit has 11 neighbours. There are two are units with only one neighbour.

The summary report for Rook Contiguity based weight matrix  shows that there are 88 area units in Hunan province. The most connected area unit has 10 neighbours. There are two are units with only one neighbour.


We can also display the output data frame using the following Methods. For the codes below, we will use ```nb_queen``` as example. 

:::{.panel-tabset}

## Option 1 - using the dataframe itself

```{r}
nb_queen
```

## Option 2 - Using kable() and head()

```{r}
kable(head(nb_queen, n=10))
``` 
:::

#### Identifying higher Order Neighbours
In class, we learnt that other than the immediate neighbours (i.e. those regions along the boundaries of an area), we can also find out their neighbour's neigbours (i.e., higher order contiguity neighbours). We can do this using ```st_nb_lag_cumul()``` of **sfdep** package.This function Creates an encompassing neighbor list of the order specified. For example, if the order is 2 the result contains both 1st and 2nd order neighbors.

In the following code chunk, we will generate the 1st and 2nd order neighbours for each region in Hunan. 

```{r}
nb2_queen <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry), 
         nb2 = st_nb_lag_cumul(nb,2),
         .before = 1) 
```

Let's take a look at the differences between 1st order only and output with both 1st and 2nd order neighhbours 

:::{.panel-tabset}

## 1st Order Only 

```{r}
nb <- st_contiguity(sf::st_geometry(hunan_GDPPC))
summary(nb)
```
## 1st and 2nd Order 

```{r}
summary(nb2_queen)
```
::: 

When higher order neighbours are included, we note that the number of nonzero links and the average number of links increased.

### Distance- based Weight Matrix
There are three popularly used distance-based spatial weights, they are:

-   fixed distance weights,
-   adaptive distance weights, and
-   inverse distance weights (IDW).

#### Fixed Distance weights 
We will use the following code chunk to determine the upper limit for distance band. This will be needed for the subsequent computation of fixed distance weight matrix. 

```{r}
geo <- sf::st_geometry(hunan_GDPPC)
nb <- st_knn(geo, longlat=TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

:::{.callout-note appearance="simple"}

## Explanation of the functions used above
-   st_geometry(): Get, set, replace or rename geometry from an sf object
-   st_knn(): Identifies the k nearest neighbors for given point geometry
- st_nb_dists():From an nb list and point geometry, return a list of distances for each observation's neighbors list.
- unlist(): Given a list structure, simplifies it to produce a vector which contains all the atomic components which occur in the list. 

::: 

We will derive the summary statistics of the nearest neighbour distances vector (i.e., dists) using the following code chunk. 

```{r}
summary(dists)
```

The summary statistics report above shows that the maximum nearest neighbour distance is 65.80km. By using a threshold value of 66km will ensure that each area will have at least one neighbour.

Now we will go ahead to compute the fixed distance weights by using the code chunk below.

```{r}
wm_fd <- hunan_GDPPC %>%
  mutate(nb=st_dist_band(geometry, upper=66),
         wt = st_weights(nb), 
         .before = 1)

```
:::{.callout-note appearance="simple"}

## Explanation of the functions used above 
-   st_dist_band: To identify neighbours based on a distance band (i.e., 66km). The output is a list of neighbours (i.e., nb). 
-   st_weights: To calcualte polygon spatial weights of the nb list. Note that: 
      -   the default style argument is set to "W" for row standardised weights, and 
      -   the default allow_zero is set to TRUE, assigns zero as lagged value to zone without neighbours. 
      
::: 

Let's take a look at the data frame. 
      
```{r}
glimpse(wm_fd)

```

#### Adaptive Distance weights 

We will derive adaptive spatial weights using the following code chunk. 

```{r}
wm_ad <- hunan_GDPPC %>% 
  mutate(nb = st_knn(geometry, 
         k = 8),
         wt = st_weights(nb),
         .before = 1) 

```

:::{.callout-note appearance="simple"}
## Explanation of the functions used above 
-   st_knn(): To identify neighbours based on a k (i.e., k=8 indicates the nearest 8 neighbours). The output is a list of neighbours (i.e., nb). 

::: 

#### Inverse Distance weights 

We will derive an inverse distance weights using the following code chunk. 

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry), 
         wt = st_inverse_distance(nb, geometry, 
                                  scale = 1,
                                  alpha = 1),
         .before=1)
```


:::{.callout-note appearance="simple"}

## Explanation of the function used above 
-   st_inverse_distance(): To calculate inverse distance weights of neighbours on the nb list. 

::: 

