---
title: "Hands-on Exercise 1B: Choropleth Mapping with R"
author: "Goh Si Hui"
date: 2023/11/16
date-format: long
---

## Overview

In this hands-on exercise, I will be sharing how to plot functional and truthful [choropleth maps](https://alg.manifoldapp.org/read/introduction-to-cartography/section/c3c06272-8b8b-49e7-a957-da0d06550b73 "What is a Choropleth map?") using an R package [`tmap`](https://r-tmap.github.io/tmap/ "tmap: thematic maps in R").

## Getting Started

### Packages

For this exercise, we will be using `tmap`, [`sf`](https://r-spatial.github.io/sf/ "Package sf: Simple Features for R") and [`tidyverse`](https://www.tidyverse.org/ "Tidyverse: collection of R packages designed for data science") packages. The code chunk below loads `tmap`, `sf` and `tidyverse` packages into R environment.

```{r}
pacman::p_load(tmap, sf, tidyverse)

```

::: callout-note
Note that we will be using the readr, tidyr and dplyr packages which are part of the tidyverse package.
:::

### Data Acquisition

The datasets we are using are downloaded from the following sources:

-   Master Plan 2014 Subzone Boundary (Web): [data.gov.sg](https://beta.data.gov.sg/ "data.gov.sg").

-   Singapore Residents by Planning Area/Subzone, Age, Group, Sex and Type of Dwelling, June 2011 - 2020: [Department of Statistics, Singapore.](https://www.singstat.gov.sg "Department of Statistics")

## Importing Data

### Importing Geospatial Data 

The code chunk below uses st_read() function of sf package to import the planning subzones, which is a polygon feature data frame.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```

Let's take a look at the contents of `mpsz` using the following code chunk:

```{r}
mpsz
```

### Importing Attribute Data 

```{r}
popdata <- read_csv("data/aspatial/respopagesexfa2011to2020.csv")
```

Let's take a look at the data imported in:

```{r}
list(popdata)
```

#can do more data exploration here. E.g. plot some charts to see the age groups, the towns

## Data Preparation

Before a thematic map can be prepared, we need to prepare a data table with 2020 values. The data table should include the following variables:

-   PA

-   SZ

-   YOUNG: age group 0 to 4 until age group 20 to 24

-   ECONOMY ACTIVE: age group 20 to 29 up till age group 60 to 64

-   AGED: age group 65 and above

-   TOTAL: all age group

-   DEPENDENCY: the ratio between YOUNG and AGED against ECONOMY ACTIVE group

### Data Wrangling

We will be using the following functions from tidyverse package:

-   pivot_wider() of tidyr package, and

-   mutate(), filter(), group_by() and select() of dplyr package

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from = AG,
              values_from = POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         + rowSums(.[12])) %>%
mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
         rowSums(.[13:15])) %>%
mutate(`AGED` = rowSums(.[16:21])) %>%
mutate(`TOTAL` = rowSums(.[3:21])) %>%
mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/ `ECONOMY ACTIVE`) %>%
select(`PA`,`SZ`, `YOUNG`,
        `ECONOMY ACTIVE`, `AGED`,
        `TOTAL`,`DEPENDENCY`)
```

### Joining Attribute Data and Geospatial Data

We will convert the values in PA and SZ files to uppercase because the values of PA and SZ fields are made up of upper and lower case while the SUBZONE_N and PLN_AREA_N are in uppercase.

```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ),
            .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

Then, we will use left_join() of dplyr to join the geographical data and trribute table using planning subzone name (SUBZON_N and SZ) as the common identifiers.

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

## Choropleth Mapping Geospatial Data Using *tmap*

### Plotting a choropleth map quickly using *qtm()*

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, fill = "DEPENDENCY")
```

### Creating a choropleth map by using *tmap*'s elements

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile",
          palette = "Blues",
          title = "Dependency ratio") + 
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) + 
  tm_borders(alpha = 0.5) +
  tm_compass(type = "8star", size = 2) + 
  tm_scale_bar() +
  tm_grid(alpha = 0.2) +
  tm_credits("Source: Planning Subzone boundary from Urban Redevelopment Authority (URA) \n and Population data from Department of Statistics (DOS)",
             position = c("left", "bottom"))

```

#### Drawing a base map 

```{r}
 tm_shape(mpsz_pop2020) + 
   tm_polygons()
```

#### Drawing a choropleth map using tm_polygons()

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons("DEPENDENCY")
```

#### Drawing a choropleth map using tm_fill() and tm_border()

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY") + 
  tm_borders(lw = 0.1, alpha = 1)
```

### Data Classification Methods of tmap 

#### Plotting choropleth maps with built-in classification methods 

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          n = 5, 
          style = "jenks") + 
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

#### Plotting choropleth map with custom break

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY", 
          breaks = c(0.0,0.60,0.70,0.80, 0.90, 1.00)) + 
  tm_borders(alpha = 0.5)
```

### Colour Scheme 

#### Using ColourBrewer palette

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          n = 6,
          style = "quantile", 
          palette = "Blues") +
  tm_borders(alpha = 0.5)


```

To revese the colour shading, add a "-" prefix under "palette".

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          n = 6, 
          style = "quantile",
          palette = "-Greens") + 
  tm_borders(alpha = 0.5)
```

### Map Layouts 

#### Map Legend

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "jenks",
          palette = "Blues", 
          legend.hist = TRUE,
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n (Jenks Classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45,
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) + 
  tm_borders(alpha = 0.5)
```

#### Map Style

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile",
          palette = "-Greens") + 
  tm_borders(alpha = 0.5) + 
  tmap_style("classic")
```

#### Cartographic Furniture 

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", style = "quantile",
          palette = "Blues", 
          title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n (Based on Quantile)",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) + 
  tm_borders(alpha = 0.5) + 
  tm_compass(type = "8star", size = 2) + 
  tm_scale_bar(width = 0.15) + 
  tm_grid(lwd = 0.1, alpha = 0.2) + 
  tm_credits("Source: Planning Subzone boundary from Urban Redevelopment Authority (URA) \n and Population data from Department of Statistics (DOS)",
             position = c("left", "bottom"))
```

```{r}
tmap_style("white")
```

### Drawing Multiple Small Choropleth Maps

#### By assigning multiple values to at least one of the aesthetic arguments 

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
          style = "equal", 
          palette = "Blues")+
  tm_layout(legend.position = c("right", "bottom")) + 
  tm_borders(alpha = 0.5) + 
  tmap_style("white")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons(c("DEPENDENCY", "AGED"),
              style = c("equal", "quantile"),
              palette = list("Blues", "Greens")) + 
  tm_layout(legend.position = c("right", "bottom"))
```

#### By defining a group-by variable in tm_facets()

```{r}
tm_shape(mpsz_pop2020) + 
  tm_fill("DEPENDENCY", 
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  tm_facets(by="REGION_N", 
            free.coords = TRUE,
            drop.shapes = TRUE) + 
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"),
            title.size = 20) + 
  tm_borders(alpha = 0.5)
```

#### By creating multiple stand-alone maps with tmap_arrange()

```{r}
youngmap <- tm_shape(mpsz_pop2020) + 
  tm_polygons("YOUNG", 
              style = "quantile",
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020) + 
  tm_polygons("AGED", 
              style = "quantile",
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp = 1, ncol = 2)
```

### Mapping Spatial Object Meeting a Selection Criterion

```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == "CENTRAL REGION", ]) +
  tm_fill("DEPENDENCY", 
          style = "quantile",
          palette = "Blues",
          legend.hist = TRUE,
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1)+
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45,
            legend.width = 5.0,
            legend.position = c("right", "bottom"), 
            frame = FALSE) + 
  tm_borders(alpha = 0.5)
```
