---
title: "Hands-on Exercise 2A: Spatial Weights and Applications"
author: "Goh Si Hui"
date: 2023/11/19
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  warning: false
editor: visual 
---

## Overview

In this exercise, we will learn how to compute spatial weights using R.

::: {.callout-note appearance="simple"}
## Do you know?

Spatial Weights is a way to define spatial neighbourhood. Defining the neighbourhood is an essential step towards measuring the strength of the spatial relationships between objects.
:::

## Getting Started

### Packages

First, we will import the relevant packages that we will be using for this hands-on exercise.

```{r}
pacman::p_load(sf,spdep,tmap,tidyverse,knitr)
```

### Importing Data

The datasets used in this hands-on exercise are:

-   `Hunan county boundary layer:` a geospatial data set in ESRI shapefile format

-   `Hunan_2012.csv`: an aspatial data set in csv format. It contains selected Hunan's local development indicators in 2012.

::: callout-note
The datasets from this exercise were provided as part of the coursework and downloaded from the student learning portal.
:::

#### Geospatial Data

First, we will use `st_read()` of **sf** package to import `Hunan county boundary layer` (a shapefile) into R.

::: panel-tabset
## Codes

```{r}
#| eval: false
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")

```

## Output

```{r}
#| echo: false
hunan <- st_read(dsn = "data/geospatial", layer = "Hunan")

```

## Data

```{r}
glimpse(hunan)
```
:::

From the output, we know that `hunan` is a polygon sf dataframe with 88 features and 7 fields. It also uses a WGS84 geometric coordinates system.

#### Aspatial Data

We will import `Hunan_2012.csv` into R using `read_csv()` of **readr** package.

::: panel-tabset
## Codes

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

## Data

```{r}
glimpse(hunan2012)
```
:::

### Performing Relational Join

We will update the attribute table of `hunan`'s spatial polygons dataframe with the attribute fields of `hunan2012` dataframe using the `left_join()` of **dplyr** package.

::: panel-tabset
## Codes

```{r}
hunan1 <- left_join(hunan, hunan2012,
                   by="County") 
```

## Output

```{r}
kable(head(hunan1))
```
:::

As we intend to only show the distribution of Gross Domestic Product Per Capita (GDPPC), we can drop some of the columns that we will not be using by selecting the columns that we want using `select()`.

::: panel-tabset
## Codes

```{r}
hunan2 <- hunan1 %>% 
  select(c(1:4, 6, 15)) 
```

## Output

```{r}
kable(head(hunan2))
```
:::

## Visualising Regional Development Indicator

We will show the distribution of Gross Domestic Product per Capita (GDPPC) using `qtm()` of **tmap** package using the following code chunk.

::: panel-tabset
## Codes

```{r}
#| eval: false

basemap <- tm_shape(hunan2) + 
  tm_polygons() + 
  tm_text("NAME_3", size = 0.5)

gdppc <- qtm(hunan2, fill = "GDPPC")
tmap_arrange(basemap, gdppc, asp = 1, ncol=2)


```

## Visualisation

```{r}
#| echo: false

basemap <- tm_shape(hunan2) + 
  tm_polygons() + 
  tm_text("NAME_3", size = 0.5)
gdppc <- qtm(hunan2, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)

```
:::

## Defining and Computing Spatial Weights

There are at least two popular methods can be used to define spatial weights of geographical areas. They are contiguity and distance.

In this hands-on exercise, we will be learning how to compute contiguity-, distance- and inverse-distance based spatial weights.

### Contiguity-Based Weight matrix

There are three different ways to define contiguity neighbours. They are Rooks, Bishops and Queen's methods. Rooks and Queens are the two commonly used methods. The main difference between Queen's and Rooks is that Rooks only considers geographical areas that shared common boundaries but Queen's method includes geographical areas touching at the tips of the target geographical area.

[![Fig 1 - Types of Contiguity Methods](images/Types_Contiguity.png){fig-align="center"}](https://chrismgentry.github.io/Spatial-Regression/#111_Contiguity)

In this section, we will use `poly2nb()` of **spdep** package to compute contiguity weight matrices for the study area. This function builds a neigbours list based on regions with contiguous boundaries that is sharing one or more boundary point. For `poly2nb()` function, it is defined in **QUEEN** contiguity by default. Hence if we want to compute Rook contiguity based neighbours, we would need to pass the argument "`queen = False`".

#### Computing Contiguity Weight Matrix

We use the following code chunk to compute Queen and Rook contiguity weight matrix.

::: panel-tabset
## Queen

```{r}
wm_q <- poly2nb(hunan2, queen=TRUE)

```

## Rook

```{r}
wm_r <- poly2nb(hunan2, queen = FALSE)
```
:::

#### Retrieving Neighbours in the Contiguity Weight Matrix

We use `summary()` to get a summary report of the computed weight matrix.

::: panel-tabset
## Queen

```{r}
summary(wm_q)

```

## Rook

```{r}
summary(wm_r)
```
:::

From the output of the Queen continguity weight matrix, we see that there are 88 regions in total within Hunan and 448 non-zero links in total. There is only 1 most-connected region and it has 11 neigbours. There are 2 least-connected area and each has only 1 neighbour.

From the output of the Rook contiguity weight matrix, we see that there are 440 non-zero links in total. There is only 1 most-connected region and it has 10 neigbours. There are 2 least-connected area and each has only 1 neighbour.

For each polygon in our polygon object, `wm_q (Queen)` and `wm_r (Rook)`, we can use the following code chunk to find out the list of neigbours for each most-connected region (a.k.a polygon).

::: panel-tabset
## Queen's Polygon 85

```{r}
wm_q[[85]]
```

## Rook's Polygon 85

```{r}
wm_r[[85]]
```
:::

The numbers in the output represent the polygon IDs stored in the `hunan` spatial polygon data frame.

To retrieve the county name of *PolygonID=85*, which is the most well connected region as seen from previous output, we use the following code chunk:

```{r}
hunan$NAME_3[85]
```

So we now know that polygon ID 85 is Taoyuan County in `hunan`.

To find out the names of the 11 neigbouring polygons that we got from the Queen Contiguity Matrix, we use the following code chunk:

```{r}
hunan2$NAME_3[c(1,2,3,5,6,32,56,57,69,75,78)]
```

We can retrieve the GDPPC of these 11 counties using the following code chunk:

```{r}
nb85q <- wm_q[[85]]
nb85q <- hunan2$GDPPC[nb85q]
nb85q

```

The output above shows the GDPPC of the 11 nearest neighbours based on Queen's method are: 23667, 20981, 34592, 25554, 27137, 24194, 14567, 21311, 18714, 14624 and 19509 respectively.

We can display the complete weight matrix using `str()`.

::: panel-tabset
## Code

```{r}
#| eval: false
str(wm_q)
```

## Output

```{r}
#| echo: false
str(wm_q)
```
:::

#### Visualising Continguity Neighbours

To visualise the contiguity neigbours, we will use a connectivity graph. A connectivity graph takes a point and displays a line to each neighboring point. As we are working with polygons currently, we will need to get points in order to make our connectivity graphs. The typical method for this will be polygon centroids. We will first calculate the polygon centroids using the sf package. To get the latitude and longitude of polygon centroids, we will use a mapping function to return a vector of the same length for each element. For this exercise, we will be using map_dbl variation of map from purrr package.

To get the longtitude values, we map the st_centroid function over the geometry column of hunan and access the longitude value through the double bracket notation `[[]]` and `1`. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan2$geometry, ~st_centroid(.x)[[1]])

```

To get the latitude, we will use change the "1" in the double bracket notation to "2" since latitude is the second value in each centroid.

```{r}
latitude <- map_dbl(hunan2$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use `cbind()` to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

##### Plotting Queen and Rook Contiguity Based Neighbours Map

We can use the following code chunk to plot the Queen- and Rook- Contiguity based neighbours map.

::: panel-tabset
## Queen Contiguity Based Neighbours Map

```{r}
plot(hunan2$geometry, border = "lightgrey")
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col = "red")
```

## Rook Contiguity Based Neighbours Map

```{r}
plot(hunan2$geometry, border = "lightgrey")
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col = "red")
```
:::

The chode chunk below plots both maps side by side.

```{r}
par(mfrow=c(1,2))
plot(hunan2$geometry, border = "lightgrey")
plot(wm_q, coords, pch=19, cex=0.6, add=TRUE, col = "red")
title("Queen Contiguity")
plot(hunan2$geometry, border = "lightgrey")
plot(wm_r, coords, pch=19, cex=0.6, add=TRUE, col = "red")
title("Rook Contiguity")
```

### Distance-based Weight Matrix

In this section, we will derive distance-based weight matrices using `dnearneigh()` of **spdep** package.

This function identifies neighbours of region points using Euclidean distance with a distance band with lower and upper bounds.The parameters necessary for `dnearneigh()` are the coordinates, the lower distance bound, and the upper distance bound. Another important parameter is the `longlat`. This is used for point data in longitude and latitude form. It is necessary to use this to get great circle distance in kilometres instead of euclidean for accuracy purposes.

#### Determine the cut-off distance

First, we need to determine the upper limit for distance band using the steps below.

1.  Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using `knearneigh()` of **spdep**.

2.  Convert the k-nearest neighbour object returned by `knearneigh()` into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids using `knn2nb().`

3.  Return the length of neighbour relationship edges using `nbdists()` of **spdep**. This function returns the Euclidean distances along the links in a list of the same form as the neighbours list. If `longlat=TRUE`, Great Circle distances are used.

4.  Remove the list structure of the returned object using `unlist()`.

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79km, so using this as an upper bound would ensure that all regions would at least have 1 neighbour.

#### Computing fixed distance weight matrix

We will now compute the distance weight matrix using `dnearneigh()` and the following code chunk.

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

From the above output, we know that there are 88 regions in Hunan and on average each region has 3.68 neighbours.

We can use `str()` to display the contents of `wm_d62` weight matrix.

:::{.panel-tabset}

## Codes

```{r}
#| eval: false
str(wm_d62)

```

## Output

```{r}
#| echo: false
str(wm_d62)
```

:::

Another way to display the structure of the weight matrix is to combine `table()` and `card()` of **spdep**.

:::{.panel-tabset}
## Codes

```{r}
#| eval: false
table(hunan$County, card(wm_d62))

```

## Output

```{r}
#| echo: false
table(hunan$County, card(wm_d62))
```
:::

##### Checking for disjoint connected subgraphs

To check if there are any disjoint connected subgraphs, we can use `n.comp.nb()` and it will return the number of disjoint connected subgraphs, and a vector with the indices of the disjoint connected subgraphs of the nodes in the spatial neighbours list object.

```{r}
number_of_components <- n.comp.nb(wm_d62)
number_of_components$nc

```

From the above, we know that there is 1 component. We will use the following code to check if all 88 regions of Hunan are in this component.

```{r}
table(number_of_components$comp.id)

```

From the above, we know that there is a single component with 88 regions. This means that each region is connected to at least 1 region and there are no isolated regions.

##### Plotting fixed distance weight matrix

We plot the distance weight matrix using the following code chunk.

```{r}
plot(hunan2$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)

```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

To plot these two type of information side by side, we can using the code chunk below.

```{r}
par(mfrow=c(1,2))
plot(hunan2$geometry, border="lightgrey")
plot(k1,coords,add=TRUE, col="red", length=0.08)
title("1st Nearest Neighbour(s)")
plot(hunan2$geometry, border="lightgrey")
plot(wm_d62,coords, add=TRUE, pch=19, cex=0.6)
title("Distance Link")
```

#### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothens the neighbour relationship across more neighbours.

We can control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
```

We can display the content of the matrix using `str()`.

::: panel-tabset
## Codes

```{r}
#| eval: false
str(knn6)
```

## Output

```{r}
#| echo: false
str(knn6)
```
:::

Notice that each county has exactly 6 neighbours.

##### Plotting adaptive distance weight matrix

We can plot the weight matrix using the code chunk below.

```{r}
plot(hunan2$geometry, border="lightgrey")
plot(knn6, coords, pch=19, cex= 0.6, add=TRUE, col="red")

```

### Inverse Distance-Based Weight matrix

In inverse distanced-based weight matrix, spatial weights are calculated as the inverse function of the distance. This means that 2 locations that are closer (i.e. shorter in distance) will be given higher weight than two locations that are further away (i.e. longer in distance).

First, we compute the distances between regions using `nbdists()` of **spdep**.

::: panel-tabset
## Codes

```{r}
dist <- nbdists(wm_q, coords, longlat=TRUE)
ids <- lapply(dist, function(x) 1/(x))
```

## Output

```{r}
ids
```
:::

Next, we need to assign weights to each neighbouring polygon. We will assign each neighbouring polygon with equal weight (`style="W"`). This is accomplished by assigning the fraction 1/(total number of neighbours) to each neighbouring county then summing the weighted income values.

While assigning each neighbouring polygon with the same weight is most intuitive way to summarise the neighbours' values, polygons which are situated along the edges of the map will base their lagged values on fewer polygons (due to the nature of their positions on the map). This could cause potential over- or under- estimation of the true nature of the spatial autocorrelation in the data.

For the purpose of this hands-on exercise, we will stick with the `style="W"` option for simplicity sake.

::: callout-note
The **`nb2listw()`** function can take in the following styles:

-   B is the basic binary coding

-   W is row standardised (sums over all links to n)

-   C is globally standardised (sums over all links to n)

-   U is equal to C divided by the number of neighbours (sums over all links to unity)

-   S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999

-   minmax is based on Kelejian and Prucha (2010), and divides the weights by the minimum of the maximum row sums and maximum column sums of the input weights. It is similar to the C and U styles.
:::

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

::: callout-warning
The `zero.policy=TRUE` option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a `zero.policy = FALSE` would return an error.
:::

To see the weight of first polygon's neighbours, we use the following code chunk.

```{r}
rswm_q$weights[1]

```

From the output, we know that the first polygon has 5 neighbours, and they are each assigned 0.2 of the total weight. When R computes the average neighbouring income values, each neihgbour's income will be multiplied by 0.2 befire being tallied.

Using the same method, we can also derive a row-standardised distance weight matrix using the following code chunk.

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style = "B", zero.policy = TRUE)
rswm_ids
```

```{r}
rswm_ids$weights[1]
```

```{r}
summary(unlist(rswm_ids$weights))
```

## Applications of Spatial Weight Matrix

After defining a neighbour structure with non-zero elements of the spatial weights, we can compute spatial lags, which is a weighted sum or a weighted average of the neighbouring values for that variable. In this section, we will create four different spatial lagged variables:

1.  spatial lag with row-standardised weights,

2.  spatial lag as a sum of neighbouring values,

3.  spatial window average, and

4.  spatial window sum.

### Spatial Lag with row-standardised weights

We can compute the average neigbour GDPPC value for each polygon using the following code chunk. These values are often referred to as spatially lagged values.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan2$GDPPC)
GDPPC.lag
```

The above output is the spatially lagged values for each region. This value is calculated by averaging each region's neighbour's GDPPC.

For example, in the previous section, we retrieved the GDPPC of polygon 1's neighbouring counties using the following code chunk:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan2$GDPPC[nb1]
nb1
```

You notice that the average of the GDPPC of polygon 1's neighbouring counties is 24847.20, which is the same value as the the first spatial value in `GDPPC.lag`.

To plot both the GDPPC and spatial lag GDPPC for comparison, we will first append the spatially lag GDPPC values onto `hunan2` sf data frame using the following code chunk:

```{r}
lag.list <- list(hunan2$NAME_3, lag.listw(rswm_q, hunan2$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan3 <- left_join(hunan2, lag.res)
```

The following table shows the average neighboring income values (column "lag GDPPC") for each county.

```{r}
head(hunan3)
```

We will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan3, "GDPPC")
lag_gdppc <- qtm(hunan3, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial Lag as a sum of neighbouring values

We can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, apply a function that will assign binary weights, then we use `glist =` in the `nb2listw()` function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbour. This is done with `lapply()`, which applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x+1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights,
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw()` to compute a lag variable from our weight and GDPPC.

```{r}
lag_sum <- list(hunan2$NAME_3, lag.listw(b_weights2, hunan2$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

```{r}
lag_sum
```

We will append **lag_sum GDPPC** field into `hunan2` of sf data frame using the following code chunk.

```{r}
hunan4 <- left_join(hunan2, lag.res)
```

We can plot both the **GDPPC** and **Spatial Lag Sum GDPPC** for comparison using the code chunk below.

```{r}
gdppc <- qtm(hunan4, "GDPPC")
lag_sum_gdppc <- qtm(hunan4, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp = 1, ncol = 2)
```

### Spatial Window Average

The spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.

To add the diagonal element to the neighbour list, we just need to use `include.self()` from **spdep**.

```{r}
wm_qs <- include.self(wm_q)

```

::: panel-tabset
## wm_q

```{r}
wm_q
```

## wm_qs

```{r}
wm_qs
```
:::

Notice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to `wm_q` of 448, 5.785124 and 5.090909.

We will now look at the neighbour list of region \[\[1\]\] of `wm_q` and `wm_qs.`

::: panel-tabset
## wm_q

```{r}
wm_q[[1]]
```

## wm_qs

```{r}
wm_qs[[1]]
```
:::

Notice that now \[1\] has six neighbours instead of five because it has included itself in the list.

Now we obtain the weights using `nb2listw().`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```

We use `nb2listw()` and `glist()` to explicitly assign weight values.Then create the lag variable from our weight structure and GDPPC variable.

```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, hunan2$GDPPC)

lag_w_avg_gpdpc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
lag.list.wm_qs <- list(hunan2$NAME_3, lag.listw(wm_qs, hunan2$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")

```

We will then append lag_window_avg GDPPC column values onto `hunan3` sf data frame using `left_join()` of **dplyr** package.

```{r}
hunan5 <- left_join(hunan3, lag_wm_qs.res)
head(hunan5)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of **Knitr** package is used to prepare a table using the code chunk below.

::: panel-tabset
## Codes

```{r}
#| eval: false
hunan5 %>% 
  select("NAME_3", "lag GDPPC", "lag_window_avg GDPPC", "geometry") %>%
  kable()
```

## Output

```{r}
#| echo: false
hunan5 %>% 
  select("NAME_3", "lag GDPPC", "lag_window_avg GDPPC", "geometry") %>%
  kable()
```
:::

Lastly, `qtm()` of **tmap** package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.

```{r}
w_avg_gdppc <- qtm(hunan5, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol = 2)
```

### Spatial Window Sum

The spatial window sum is the counter part of the window average, but without using row-standardized weights. Similar to the spatial window average, each region's neighhour includes the region itself. We first add diagonal element to the neighbour list.

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

We will now assign binary weights to the neighbour structure that includes the diagonal element.

```{r}
b_weights3 <- lapply(wm_qs, function(x) 0*x + 1)

```

Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

```{r}
b_weights3 <- nb2listw(wm_qs, 
                       glist = b_weights3,
                       style = "B")

b_weights3
```

To compute the lag variable with `lag.listw()`, we use the following code chunk.

```{r}

w_sum_gdppc <- list(hunan2$NAME_3, lag.listw(b_weights3, hunan2$GDPPC) )
w_sum_gdppc
```

Next, we will convert the lag variable listw object into a data.frame by using `as.data.frame()`.

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

We will append w_sum GDPPC values onto `hunan3` sf data.frame by using `left_join()` of **dplyr** package using the following code chunk.

```{r}
hunan6 <- left_join(hunan4, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of **Knitr** package is used to prepare a table using the code chunk below.

:::{.panel-tabset}
## Codes 

```{r}
#| eval: false
hunan6 %>%
  select("NAME_3", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```
## Output

```{r}
#| echo: false
hunan6 %>%
  select("NAME_3", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```
:::

Lastly, `qtm()` of **tmap** package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.

```{r}
w_sum_gdppc <- qtm(hunan6, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)

```
