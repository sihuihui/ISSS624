---
title: "Hands-on Exercise 1A: Geospatial Data Wrangling with R"
author: "Goh Si Hui"
date: 2023/11/16
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  warning: false
editor: visual 
---

## Overview

In this hands-on exercise, I will be sharing how to import and wrangle geospatial data using appropriate R packages.

## Getting Started

### Packages

For this exercise, we will be using [**sf**](https://r-spatial.github.io/sf/ "Package sf: Simple Features for R") and [**tidyverse**](https://www.tidyverse.org/ "Tidyverse: collection of R packages designed for data science") packages. The code chunk below installs and loads **sf** and **tidyverse** packages into R environment.

```{r}
pacman::p_load(sf, tidyverse)

```

### Data Acquisition and Extraction

We will extract the following data sets from these sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://beta.data.gov.sg/ "data.gov.sg")

-   Pre-Schools Location from [data.gov.sg](https://beta.data.gov.sg/ "data.gov.sg")

-   Cycling Path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html "LTA Data Mall")

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data/ "Inside Airbnb - Adding data to the debate")

After we have downloaded these data sets, we created a sub-folder called `data`. Within the `data`sub-folder, we created 2 sub-folders, namely `geospatial` and `aspatial`. `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path` files should be placed in the `geospatial` folder while the `Singapore Airbnb listing data` should be in the `aspatial` folder.

## Importing Geospatial Data

### Importing polygon feature data

The code chunk below uses `st_read()` function of **sf** package to import the planning subzones, which is a polygon feature data frame.

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")

```

The message above also tells us that `mpsz`'s geometry type is multipolygon, there are a total of 323 multipolygon features and 15 fields in `mpsz` and it is in **svy21** projected coordinates systems.

### Importing polyline feature data in shapefile form

The code chunk below uses `st_read()` function of **sf** package to import `CyclingPath` shape file into R as line feature data frame.

```{r}
cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")
```

From the above, we know that `cyclingpath` has a total of 2558 features and 2 fields, is a multilinestring, and is in **svy21** projected coordinates system.

### Importing GIS data in kml format

We will also use `st_read()` to import GIS data in kml format:

```{r}
preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

From the above, we know that `preschool` has 2290 features and 2 fields, a point feature data frame, and is in **wgs84** coordinates system.

## Checking the Content of A Simple Feature Data Frame

We can use different ways to retrieve information related to the content of a simple feature data frame.

### Working with st_geometry()

`st_geometry()` displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.

```{r}
st_geometry(mpsz)

```

### Working with glimpse()

`glimpse()` reveals the data type of each fields. 

```{r}
glimpse(mpsz)

```

### Working with head()

While `glimpse()` displays all the variables in the feature object, `head()` reveals the complete information of a feature object, which gives us a snapshot of the simple feature data frame.

```{r}
head(mpsz, n=5)

```

::: {.callout-note appearance="simple"}

## Interesting info found!

Here is an [article](https://towardsdatascience.com/python-and-r-for-data-wrangling-examples-for-both-including-speed-up-considerations-f2ec2bb53a86#:~:text=In%20the%20following%20gist%2C%20in,and%20values%20of%20the%20latter.) on the difference between `glimpse()` and `head()`.

> "the *head()* function shows the first few rows (observations) of the *Data Frame*. The *glimpse()* function displays the number of observations, and variables (columns) along with the type, name, and values of the latter."

:::

## Plotting Geospatial Data

Other than looking at feature information, we should also visualise geospatial features. `plot()` is a quick and useful way to plot geospatial features:

```{r}
plot(mpsz)

```

`plot()` returns us a multi-plot of all attributes, up to a reasonable maximum as shown above.

::: {.callout-note}

If plot() is unable to plot all attributes, a warning would appear.

:::

We can choose to plot only the geometry by using the code chunk below.

```{r}
plot(st_geometry(mpsz))

```

Alternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.

```{r}
plot(mpsz["PLN_AREA_N"])

```

## Working with MAP Projection

Map projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system. In this section, we will project a simple feature data frame from one coordinate sstem to another coordinate system.

:::{.callout-note}

You can read more about map projections in general [here](https://gisgeography.com/map-projections/ "How Map Projections Work") and Singapore's map projections [here](https://epsg.io/?q=Singapore%20kind%3APROJCRS).

:::

### Assigning EPSG code to a simple feature data frame

First, we will check the coordinate system of `mpsz` simple feature data frame using `st_crs()` of **sf** package:

```{r}
st_crs(mpsz)

```

Although `mpsz` data frame is projected in **svy21**, the above results shows that the EPSG is 9001, which is the wrong EPSG code because the correct EPSG code for **svy21** should be 3414.

Hence we will assign the correct EPSG code to `mpsz` data frame using `st_set_crs()` of **sf** package:

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

We will check the coordinate system of `mpsz` simple feature data frame using `st_crs()` and we should see that the EPSG code is now 3414.

```{r}
st_crs(mpsz3414)
```

### Transforming the projection of preschool from wgs84 to svy21

Using `st_crs()`, we check the projection of preschool data frame:

```{r}
st_crs(preschool)

```

As preschool is in wgs84 coordinate system, we will need to reproject preschool from a wgs84 coordinate system to svy21 coordinate system using `st_transform()` .

:::{.callout-note}

Note that `st_transform()` converts or transforms coordinates of simple feature while `st_set_crs()` change the coordinate reference system without modifying any coordinates.

:::

```{r}
preschool3414 <- st_transform(preschool, crs = 3414)

```

We will check the projection of preschool data frame:

```{r}
st_crs(preschool3414)

```

## Importing and Converting an Aspatial Data

In this section, we will import an aspatial data into R environment and save it as a tibble data frame. Then, convert it into a simple feature data frame using the x- and y- coordinates in `listing` of Inside Airbnb data.

### Importing the aspatial data

We use `read_csv()` of readr package to import the aspatial data in. The output is `listings` and it is a tibble data frame;

```{r}
listings <- read_csv("data/aspatial/listings.csv")

```

We check the imported data using `list()` of Base R.

```{r}
list(listings)
```

The output reveals that listing tibble data frame consists of 4252 rows and 16 columns. We will be using the latitude and longitude from listings to create a simple feature data frame.

### Creating a simple feature data frame from an aspatial data frame

The code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) %>%
  st_transform(crs = 3414)

```

We then use glimpse() to examine the content of the newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

Table above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame.

## Geoprocessing with sf package

In this section, we will learn to perform tow commonly used geoprocessing functions: buffering and point in polygon count.

### Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths

```{r}
buffer_cycling <- st_buffer(cyclingpath, dist = 5, nQuadSegs = 30)

```

Then, calculate the area of the buffers:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)

```

Then sum the total area to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

### Point-in-polygon Count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

First, we calculate the number of preschools in each subzone:

```{r}
mpsz3414$'PreSch Count' <- lengths(st_intersects(mpsz3414, preschool3414))

```

Then, check the summary statistics of the PreSch count filed using summary():

```{r}
summary(mpsz3414$'PreSch Count')
```

We use top_n() to list the planning subzone with the most number of pre-school:

```{r}
top_n(mpsz3414, 1, 'PreSch Count')

```

To calculate the density of pre-school by planning subzone. we first derivethe area of each planning subzone:

```{r}
mpsz3414$Area <- mpsz3414 %>% 
  st_area()

```

Then use `mutate()` to compute the density of preschool by planning subzone

```{r}

mpsz3414 <- mpsz3414 %>% 
    mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

## Exploratory Data Analysis

In this section, we will learn how to use appropriate **ggplot2** functions to create statistical graphs for exploratory data analysis purposes.

One quick way to plot the preschool density is to use `hist()` of **R graphics**:

```{r}
hist(mpsz3414$`PreSch Density`)
```

However `hist()` has limited room for further customisation. Hence, we will use functions from **ggplot2**:

```{r}
ggplot(data = mpsz3414,
       aes(x = as.numeric(`PreSch Density`))) + 
  geom_histogram(bins = 20,
                 color = "black",
                fill = "light blue") + 
  labs(title = "Are Pre-Schools Evenly Distributed in Singapore?",
       subtitle = "There are many planning subszones with a single pre-school, on the other hand, \nthere are two planning subszones with at least 20 preschools",
       x = "PreSchool Density (per km sq)",
       y = "Frequency")
```

Scatterplot showing the relationship between pre-school density and pre-school count.

```{r}
ggplot(data = mpsz3414,
       aes(y = `PreSch Count`,
         x = as.numeric(`PreSch Density`))) +
  geom_point(color = "blue") + 
  xlim(0, 40) + 
  ylim(0, 40) + 
  labs(title = "Scatter Plot of PreSchool Density and PreSchool Count", 
       x = "PreSchool Density (per km sq)", 
       y = "PreSchool Count")
```
