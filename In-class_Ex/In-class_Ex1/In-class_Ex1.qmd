---
title: "In-class Exercise 1: My First Date with Geospatial Data Analytics"
subtitle: "Lesson 1" 
author: "Goh Si Hui"
date: 2023/11/18
date-format: long
date-modified: "last-modified"
format: html 
execute: 
  echo: true
  eval: true
  warning: false
editor: visual 
---

## Getting Started

We will first load the necessary packages using the following code chunk:

-   **tmap**: for thematic mapping
-   **sf**: for geospatial data handling
-   **tidyverse**: for non-spatial data handling

```{r}
pacman::p_load(tmap, sf, tidyverse)
```

## Preparing the Data

### Importing the Origin Destination (OD) data

We will import the `Passenger Volume by Origin Destination Bus Stops` data set downloaded from [LTA DataMall](https://datamall.lta.gov.sg/content/datamall/en.html "LTA DataMall") by using `read_csv()` of **readr** package, which is part of **tidyverse** package.

```{r}
#| eval: false

odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```



From the above, we see that **ORIGIN_PT_CODE** and **DESTINATION_PT_CODE** are character data type. We should convert these two columns from characters into factors because these two columns contains the bus stop numbers and we will need these bus stop numbers to get the bus stop locations in subsequent steps. We will use `as.factor()` to convert the data from character to factor.

```{r}
#| eval: false
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

::: {.callout-note appearance="simple"}
## Do you know?

Factors are used for categorical variables, variables that have a fixed and known set of possible values.Â In R, factors allow for ordered categories with a fixed set of acceptable values. Typically, we would convert a column from character or numeric class to a factor if we want to set an intrinsic order to the values ("levels") so they can be displayed non-alphabetically in plots and tables.

If you are interested to read more about factors, this [webpage](https://r4ds.had.co.nz/factors.html "R for Data Science (2e)") has more interesting information and references.
:::

### Extracting the Study Data

We will extract the study data using `filter()`, `group_by()` and `summarise()` to get our study data (i.e., weekday trips that start from 7am and end before 10am).

```{r}
#| eval: false
origintrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 & TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

## Working with Geospatial Data

We will use `st_read()` from **sf** package to read the geospatial data and use `st_transform()` from **sf** package to project the data into **svy21** using its ESPG code 3414.

```{r}
busstop <- st_read(dsn = "data/spatial", layer = "BusStop") %>%
  st_transform(crs = 3414)

```

Let us take a look at the imported data:

```{r}
busstop
```

```{r}
mpsz <- st_read(dsn = "data/spatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)

```

Let us take a look at the imported data:

```{r}
mpsz
```
